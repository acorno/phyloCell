function phy_computeDivisionTime()

global segmentation

score=[];
score.cell=[];

displayImage=segmentation.realImage(:,:,1);

%phy_progressbar(0);

%MUST SORT DAUGHTER LIST ACCORDING TO APPEARENCE !!!ç

for i=5 %length(segmentation.tcells1)
    
    tcell=segmentation.tcells1(i);
    
    div=tcell.divisionTimes;
    [tim ix]=sort(tcell.divisionTimes);
    
    cc=1;
    
    if numel(tcell.daughterList)==0
        continue
    end
    
    for fr=tcell.detectionFrame:tcell.lastFrame
        
        
        if numel(tcell.daughterList)>=cc+1
            if fr>segmentation.tcells1(tcell.daughterList(ix(cc+1))).detectionFrame
                
                budarr=tcell.mothers(segmentation.tcells1(tcell.daughterList(ix(cc+1))).detectionFrame:fr)
                
                cc=cc+1;
            end
        end
        
        l=tcell.daughterList(ix(cc));
        
        cells1=segmentation.cells1(fr,:);
        
        budneck=segmentation.budnecks(fr,:);
        
%         masks=zeros(size(displayImage,1),size(displayImage,2));
%         for j=1:length(budneck)
%             if budneck(j).n~=0
%                 bw_cell = poly2mask(budneck(j).x,budneck(j).y,size(displayImage,1),size(displayImage,2));
%                 masks(bw_cell)=budneck(j).n;
%             end
%         end
        
        out=[];
        val=[];
        
        cells=segmentation.cells1(fr,:);
        n=[cells.n];
        p0=find(n==i);
        p1=find(n==l);
        
        if numel(p1)==0
            tcell.mothers(fr)=0;
            continue
        end
        
        
        theta=atan2(cells1(p0).oy-cells1(p1).oy,cells1(p0).ox-cells1(p1).ox);
        
        if abs(theta)<pi/4 || abs(theta)>3*pi/4
            xc=[cells1(p1).ox-3 cells1(p1).ox-3 cells1(p0).ox+3  cells1(p0).ox+3 cells1(p1).ox-3];
            yc=[cells1(p1).oy-3 cells1(p1).oy+3 cells1(p0).oy+3  cells1(p0).oy-3 cells1(p1).oy-3];
        else
            xc=[cells1(p1).ox-3 cells1(p1).ox+3 cells1(p0).ox+3  cells1(p0).ox-3 cells1(p1).ox-3];
            yc=[cells1(p1).oy-3 cells1(p1).oy-3 cells1(p0).oy+3  cells1(p0).oy+3 cells1(p1).oy-3];
        end
        
        ar=polyarea(xc,yc);
        
        
        
        bw_target = poly2mask(xc,yc,size(displayImage,1),size(displayImage,2));
        
        img=phy_loadTimeLapseImage(segmentation.position,fr,segmentation.budneckChannel,'non retreat');
            warning off all;
        img=imresize(img,segmentation.sizeImageMax);
            warning on all;
        
         pix=img(bw_target);
         pix=sort(pix,'descend');
         fr,l,val=mean(pix(1:10))
         
        % pix=masks(bw_target);
        
        % if mean(pix)~=0
        %     out=[out ind];
        %     val=[val numel(pix)];
        % end
        
        %inte=find(bw_target & masks);
        %cc,fr,j,numel(inte)
        %if numel(inte)>0
            tcell.mothers(fr)=val;
        %else
            %tcell.mothers(fr)=0;
        %end
%         if fr<122 && fr>=110
%         figure, imshow(90*uint16(bw_target)+img,[]);
%         
%       
%         line(cells1(p0).x,cells1(p0).y,'Color','r'); hold on
% 
% 
%         line(cells1(p1).x,cells1(p1).y,'Color','g'); hold on
% 
%  
% 
%        % fr,l,a=tcell.mothers(fr)
%         pause
%         close
%         end
        
        
    end
    
end

