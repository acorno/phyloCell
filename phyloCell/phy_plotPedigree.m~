%this function plots the pedigree in a separate figure
%input:temporal objects tcells
%        option=1 plot with budnecks time or 2 plot some dependent data
%        (aire) for each frame and cell (the color intensity will varie in function of the data)
%output: handle of the axes, haxe
%        handle of the dispalyed image, himage

function [haxe himg]=phy_plotPedigree(tcells,option,firstMCell)


%position of each cell
xpos=ones(size(tcells));

endFrame=0;

%scale factor, how many pixels for one frame
scaleFactor=5;

%size of the image
sizex=1024;
sizey=380;

%the RGB image(background white)
phy=0.5*(ones(sizey,sizex));
phy = repmat( phy, [1, 1, 3] );

%the width in pixels of each line 
linesize=2;
linesize=round(linesize);

%colors of the lines (RGB 0to 1)(1 1 0=yellow)
buddedColor=[1 0.7 0];
unbuddedColor=[0 1 0];
joinColor=[0.9 0.9 0.9];

%if not using budnecks unbuded color=black
if option==2
    unbuddedColor=[0 0 0];
end

%figure,imshow(phy);
%find first mother cell
n=length(firstMCell);
indm=firstMCell;
% for i=1:numel(tcells)
%     if tcells(i).N~=0
%         a= tcells(i).mother;
%         if a==0 && i<10
%             n=n+1;
%             indm=[indm i];
%             %break;
%         end
%     end
% end


%set the position of the first cell
for i=1:n
    xpos(indm(i))=10+(i-1)*(sizex-10)/n;
end

%set the positions of the daughter cells (recursivly function)
for i=1:n
    if i~=n
        xpos=buildNode(tcells,xpos,indm(i),xpos(indm(i)),xpos(indm(i+1)));
    else
        xpos=buildNode(tcells,xpos,indm(i),xpos(indm(i)),sizex);
    end
    
end
xpos=round(xpos);

%calculate the max and the min of the plotting data 
dataScale=[];
for i=1:numel(tcells)
    if xpos(i)~=0
        for j=1:length(tcells(i).Obj)
            if ~isempty(tcells(i).Obj(j).x)
                tcells(i).Obj(j).fluoMean(2)=tcells(i).Obj(j).area;
                dataScale=[dataScale tcells(i).Obj(j).fluoMean(2)];
            end
        end
        endFrame=max(endFrame,tcells(i).lastFrame);
    end
end
m=min(dataScale);
M=max(dataScale);

%if plotting the data instad of tha budneck time
if option~=2

    %---------------------
    %dialog box
    prompt = {'Enter small value:','Enter big value:'};
    dlg_title = 'Input for pedigree representation value';
    num_lines = 1;
    def = {num2str(m),num2str(M)};
    answer = inputdlg(prompt,dlg_title,num_lines,def);
    if isempty(answer)
        return
    end
    m=str2double(answer(1));
    M=str2double(answer(2));
    %-----------------------
end

%plot the vertical lignes (scaled if data ploted , black if not)
for i=1:numel(tcells)
    position=xpos(i);
    for j=1:length(tcells(i).Obj)
        if tcells(i).Obj(j).image~=0 && tcells(i).Obj(j).image>=tcells(i).birthFrame
            phy(tcells(i).Obj(j).image,position:position+linesize,1)=unbuddedColor(1)*((tcells(i).Obj(j).fluoMean(2))-m)/(M-m);
            phy(tcells(i).Obj(j).image,position:position+linesize,2)=unbuddedColor(2)*((tcells(i).Obj(j).fluoMean(2))-m)/(M-m);
            phy(tcells(i).Obj(j).image,position:position+linesize,3)=unbuddedColor(3)*((tcells(i).Obj(j).fluoMean(2))-m)/(M-m);
        end
        
    end
    endFrame=max(endFrame,tcells(i).lastFrame);
    
end


%plot the orisontal lignes
for i=1:numel(tcells)
    divisionTime=tcells(i).divisionTimes;
    divisionTime(divisionTime==0)=1;
    
    position=xpos(i);
    
    for j=1:numel(divisionTime)
        
        daughter=tcells(i).daughterList(j);
        daughterpos=xpos(daughter);
        
        
        phy(divisionTime(j):divisionTime(j)+1,position:daughterpos,1)=joinColor(1);
        phy(divisionTime(j):divisionTime(j)+1,position:daughterpos,2)=joinColor(2);
        phy(divisionTime(j):divisionTime(j)+1,position:daughterpos,3)=joinColor(3);
        
        
    end
    
end

%plot the budnecks time (vertical lignes)
if option==2
    for i=1:numel(tcells)
        divisionTime=tcells(i).divisionTimes;
        divisionTime(divisionTime==0)=1;
        budTime=tcells(i).budTimes;
        budTime(budTime==0)=1;
        position=xpos(i);
        
        for j=1:numel(divisionTime)
            
            phy(budTime(j):divisionTime(j),position:position+linesize,1)=buddedColor(1);
            phy(budTime(j):divisionTime(j),position:position+linesize,2)=buddedColor(2);
            phy(budTime(j):divisionTime(j),position:position+linesize,3)=buddedColor(3);
        end
    end
end
%resize the image to the scaling factor
phy=imresize(phy,[sizey*scaleFactor,sizex],'nearest');
hfig=figure;
haxe=axes('parent',hfig);
himg=imshow(phy,'parent',haxe);

%put some data in "user data" of the image
uData.image=phy;
uData.scaleFactor=scaleFactor;
uData.xpos=xpos;
uData.tcells=tcells;
uData.linesize=linesize;
uData.haxe=haxe;
set(himg,'UserData',uData);

%name of the cells
for i=1:numel(tcells)
    text(xpos(i),endFrame*scaleFactor+3,num2str(i),'FontSize',6);
end

%legend
%line( [sizex-120 sizex-80], [10 10],'Color',unbuddedColor,'lineWidth',linesize);
%line( [sizex-120 sizex-80], [40 40],'Color',buddedColor,'lineWidth',linesize);
%text(sizex-80,10,'unbudded','FontSize',10);
%text(sizex-80,40,'budded','FontSize',10);
line( [sizex-100 sizex-100], [60 60+scaleFactor*20],'Color',[1 1 1],'lineWidth',linesize);
text(sizex-80,80,'60 min','FontSize',10,'Color','w');

line( [1 1024], [166*scaleFactor 166*scaleFactor],'Color',[1 0 0],'lineWidth',2);


%write the text of cells with no mother
cellnoMother=find(xpos==1);
faux=[];
for i=1:length(cellnoMother)
    if tcells(cellnoMother(i)).N==0
        faux=[faux i];
    end
end
cellnoMother(faux)=[];
%text(sizex-100,80+scaleFactor*20,{'cells with no mother',num2str(cellnoMother)},'FontSize',10);



function xpos=buildNode(tcells,xpos,i,posmin,posmax)
%get the list of cells xpositinon in pedigree
daughterList=tcells(i).daughterList;

if ~issorted(tcells(i).divisionTimes)
    [B,IX]=sort(tcells(i).divisionTimes);
    daughterList(:)=daughterList(IX);
end;
n=0;

for j=daughterList
   
    if tcells(j).mother~=i
        continue
    end
    xpos(j)=(posmin+posmax)/2;
    
    
    xpos=buildNode(tcells,xpos,j,xpos(j),posmax);
    
    posmax=xpos(j);
    n=n+1;
end

function t

