
% position : [ 1 2 3 8] : list positions to be anayzed
% path, file, frames

% optional arguments:

% 'cells' : segment cell contours
% 'nucleus' : segment and score nuclei
% 'mapnucleus': map nuclei
% 'mapcells': map cells
% 'cellcycle':extract cellcycle phase
% 'display' : display running segmentation


%%
function phy_batchNuclearSegmentation(path, file, frames, position,varargin)
global segmentation timeLapse

segCells = getMapValue(varargin, 'cells');
segNucleus = getMapValue(varargin, 'nucleus');
mapNucleus = getMapValue(varargin, 'mapnucleus');
mapCells = getMapValue(varargin, 'mapcells');
cellcycle = getMapValue(varargin, 'cellcycle');
display = getMapValue(varargin, 'display');

setProjectPath
setProcessingParameters

if display
    if segCells
    hcells=figure('Position',[10 10 800 600]);
    end
    if segNucleus
    hnucleus=figure('Position',[1000 10 800 600]);
    end
end


for l=position
    
    %[segmentation timeLapse]=phy_openSegmentationProject(timeLapsepath,timeLapsefile,l,[1 3]);
    
    strPath=strcat(timeLapsepath,timeLapsefile);
    load(strPath);
    timeLapse.path=timeLapsepath;
    timeLapse.realPath=timeLapsepath;
    
    segmentation=phy_createSegmentation(timeLapse,l);
    segmentation.position=l;

    
    for i=frames
        
        
        
        if segCells
            imcell=segmentCells;
        end
        
        if segNucleus
            imbud=segmentNucleus;
        end
        
        if display
           displayCells 
        end
        
    end
    
end

%%
    function displayCells
        
        if segCells
        figure(hcells);
        
        warning off all
         imshow(imcells,[]);
        warning on all
       
        cellsout=segmentation.cells1(i,:);
        
        for j=1:length(cellsout)
            if display2==1
                line(cellsout(j).x,cellsout(j).y,'Color','r');
            end
        end
        
        
        end
        
        
        if segNucleus
            figure(hnucleus);
        
        warning off all
         imshow(imbud,[]);
        warning on all
        
        cellsout=segmentation.nucleus(i,:);
        
        for j=1:length(cellsout)
            if display2==1
                line(cellsout(j).x,cellsout(j).y,'Color','r');
            end
        end
        end
        
        end
    end


%%
    function imcells=segmentCells
        
        
        imcells=phy_loadTimeLapseImage(segmentation.position,i,1,'non retreat');
        segmentation.cells1(i,:)=phy_Object;
        
        cov=std(double(imcells(:)))/mean(double(imcells(:)));
        if cov<0.26
            segmentation.discardImage(i)=1;
            continue;
        end
        
        cells=phy_segmentWatershedGC(imcells,segmentation.processing.parameters{1,14}{2,2},...
            segmentation.processing.parameters{1,14}{3,2},segmentation.processing.parameters{1,14}{4,2},...
            segmentation.processing.parameters{1,14}{5,2},segmentation.processing.parameters{1,14}{6,2},...
            segmentation.processing.parameters{1,14}{7,2});
        
        
        for j=1:length(cells)
            segmentation.cells1(i,j)=cells(j);
            segmentation.cells1(i,j).image=i;
        end
    end

%%
    function imbud=segmentNucleus
        
        
        imbud=phy_loadTimeLapseImage(segmentation.position,i,2,'non retreat');
        warning off all
        imbud=imresize(imbud,2);
        warning on all
        
        parametres=segmentation.processing.parameters{2,7};
        
        nucleustemp=phy_segmentMito(imbud,parametres);
        
        budneck=phy_Object;
        for j=1:length(budnecktemp)
            if budnecktemp(j).n~=0
                segmentation.nucleus(i,j)=budnecktemp(j);
                segmentation.nucleus(i,j).image=i;
            end
        end
        
    end




%%
    function setProjectPath
        
        
        str=strcat(path,file);
        
        load(str);
        
        timeLapse.realPath=strcat(path);
        timeLapse.realName=file;
        
        timeLapsepath=timeLapse.realPath;
        timeLapsefile=[timeLapse.filename '-project.mat'];
        
    end

%%
    function setProcessingParameters()
        
        segmentation.processing.parameters{1,14}{1,2}=1;
        segmentation.processing.parameters{1,14}{2,2}=400;
        segmentation.processing.parameters{1,14}{3,2}=20000;
        segmentation.processing.parameters{1,14}{4,2}=40;
        segmentation.processing.parameters{1,14}{5,2}=0.3;
        segmentation.processing.parameters{1,14}{6,2}=1;
        segmentation.processing.parameters{1,14}{7,2}=0;
        
        
        segmentation.processing.parameters{1,9}{1,2}=1;
        segmentation.processing.parameters{1,9}{2,2}=40;
        segmentation.processing.parameters{1,9}{3,2}=1;
        segmentation.processing.parameters{1,9}{4,2}=1;
        segmentation.processing.parameters{1,9}{5,2}=0;
        segmentation.processing.parameters{1,9}{6,2}=0;
        
        segmentation.processing.parameters{2,7}{4,2}=10;
        segmentation.processing.parameters{2,7}{5,2}=120;
        
    end

%%
    function value = getMapValue(map, key)
        value = 0;
        
        for i = 1:1:numel(map)
            if strcmp(map{i}, key)
                value = 1;
                
                return
            end
        end
    end

end
